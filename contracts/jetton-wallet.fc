#include "imports/stdlib.fc";

int min_tons_for_storage() asm "10000000 PUSHINT";
int gas_consumption() asm "15000000 PUSHINT";

() save_data(int balance, slice owner_address, slice jetton_master_address, cell jetton_wallet_code) impure {
    pack_jetton_wallet_data(balance, owner_address, jetton_master_address, jetton_wallet_code);
}

(int, slice, slice, cell) load_data() inline {
    var cs = get_data().begin_parse();
    return (cs~load_coins(), cs~load_msg_addr(), cs~load_msg_addr(), cs~load_ref());
}

{- TOKEN STANDARD: https://github.com/ton-blockchain/TIPs/issues/74
    All methods implemented regarding to described wallet
    contract interface and complies with all business logic requirements.
-}

{- TL-B SCHEMA OF MESSAGE BODY transfer
    query_id:uint64
    amount:(VarUInteger 16)
    destination:MsgAddress
    response_destination:MsgAddress
    custom_payload:(Maybe ^Cell)
    forward_ton_amount:(VarUInteger 16)
    forward_payload:(Either Cell ^Cell) = InternalMsgBody;
-}
() send_tokens(slice in_msg_body, slice sender, int msg_value, int fwd_fee) impure {
    int query_id = in_msg_body~load_uint(64);
    int jetton_amount = in_msg_body~load_coins();
    slice to_owner = in_msg_body~load_msg_addr();
    force_chain(to_owner);
    (int balance, slice owner, slice jetton_master, cell jetton_wallet_code) = load_data();
    balance -= jetton_amount;

    throw_unless(705, equal_slices(sender, owner));
    throw_unless(706, balance >= 0);

    cell state_init = calculate_jetton_wallet_state_init(to_owner_address, jetton_master_address, jetton_wallet_code);
    slice to_wallet_address = calculate_jetton_wallet_address(state_init);

    slice response_address = in_msg_body~load_msg_addr();
    cell custom_paylaod = in_msg_body~load_ref();
    int forward_ton_amount = in_msg_body~load_coins();

    throw_unless(708, slice_bits(in_msg_body) >= 1);
    slice either_forward_payload = in_msg_body;

    var msg_body = begin_cell() ;; message body regarding to jetton standard, recieve_tokens() will handle it
        .store_uint(op::internal_transfer(), 32)
        .store_uint(query_id, 64)
        .store_coins(jetton_amount)
        .store_slice(owner_address)
        .store_slice(response_address)
        .store_coins(forward_ton_amount)
        .store_slice(either_forward_payload)
        .end_cell();
    var msg = begin_cell() ;; every TON message built in strict way described  in https://docs.ton.org/develop/smart-contracts/messages
        .store_uint(0x18, 6) ;; 011000 more details in link bellow
        .store_slice(to_wallet_address)
        .store_coins(0)
        .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1) ;; explained in link bellow
        .store_ref(state_init)
        .store_ref(msg_body);

    int fwd_count = forward_ton_amount ? 2 : 1;
    throw_unless(709, msg_value > forward_ton_amount + fwd_count * fwd_fee + (2 * gas_consumption() + min_tons_for_storage()));

    send_raw_message(msg.end_cell(), 64); ;; revert on errors
    save_data(balance, owner_address, jetton_master_address, jetton_wallet_code);
}

{- TL-B SCHEMA OF MESSAGE BODY internal_transfer
    query_id:uint64
    amount:(VarUInteger 16)
    from:MsgAddress
    response_address:MsgAddress
    forward_ton_amount:(VarUInteger 16)
    forward_payload:(Either Cell ^Cell) = InternalMsgBody;
-}
() receive_tokens (slice in_msg_body, slice sender_address, int my_ton_balance, int fwd_fee, int msg_value) impure {
    (int balance, slice owner_address, slice jetton_master_address, cell jetton_wallet_code) = load_data();
    int query_id = in_msg_body~load_uint(64);
    int jetton_amount = in_msg_body~load_coins();

    balance += jetton_amount;

    slice from_address = in_msg_body~load_msg_addr();
    slice response_address = in_msg_body~load_msg_addr();
    throw_unless(707,
        equal_slices(jetton_master_address, sender_address)
        | equal_slices(calculate_user_jetton_wallet_address(from_address, jetton_master_address, jetton_wallet_code), sender_address)
    );

    int forward_ton_amount = in_msg_body~load_coins();

    int storage_fee = min_tons_for_storage() - min(ton_balance_before_msg, min_tons_for_storage());
    msg_value -= (storage_fee + gas_consumption());

    if (forward_ton_amount) {
        msg_value -= (forward_ton_amount + fwd_fee);
        slice either_forward_payload = in_msg_body;

        var msg_body = begin_cell()
            .store_uint(op::transfer_notification(), 32)
            .store_uint(query_id, 64)
            .store_coins(jetton_amount)
            .store_slice(from_address)
            .store_slice(either_forward_payload)
            .end_cell();
        var msg = begin_cell()
            .store_uint(0x10, 6) ;; we should not bounce here cause receiver can have uninitialized contract
            .store_slice(owner_address)
            .store_coins(forward_ton_amount)
            .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_ref(msg_body);

        send_raw_message(msg.end_cell(), 1);
    }

    if ((response_address.preload_uint(2) != 0) & (msg_value > 0)) {
        var msg = begin_cell()
            .store_uint(0x10, 6) ;; nobounce - int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool src:MsgAddress -> 010000
            .store_slice(response_address)
            .store_coins(msg_value)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_uint(op::excesses(), 32)
            .store_uint(query_id, 64);
        send_raw_message(msg.end_cell(), 2);
    }

    save_data(balance, owner_address, jetton_master_address, jetton_wallet_code);
}

{- TL-B SCHEMA OF MESSAGE BODY burn
    query_id:uint64
    amount:(VarUInteger 16)
    response_destination:MsgAddress
    custom_payload:(Maybe ^Cell) = InternalMsgBody;
-}
() burn_tokens(slice in_msg_body, slice sender_address, int msg_value, int fwd_fee) impure {
    (int balance, slice owner_address, slice jetton_master_address, cell jetton_wallet_code) = load_data();
    int query_id = in_msg_body~load_uint(64);
    int jetton_amount = in_msg_body~load_coins();
    slice response_address = in_msg_body~load_msg_addr();

    balance -= jetton_amount;
    throw_unless(705, equal_slices(owner_address, sender_address));
    throw_unless(706, balance >= 0);
    throw_unless(707, msg_value > fwd_fee + 2 * gas_consumption());

    var msg_body = begin_cell()
        .store_uint(op::burn_notification(), 32)
        .store_uint(query_id, 64)
        .store_coins(jetton_amount)
        .store_slice(owner_address)
        .store_slice(response_address)
        .end_cell();

    var msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(jetton_master_address)
        .store_coins(0)
        .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_ref(msg_body);

    send_raw_message(msg.end_cell(), 64);
    save_data(balance, owner_address, jetton_master_address, jetton_wallet_code);
}

{- TL-B of internal message int_msg_info
    $0: just one bit equals to zero, which identifies msg as internal, for external it would be equals to 1
    ihr_disabled:Bool
    bounce:Bool
    bounced:Bool
    src:MsgAddress
    dest:MsgAddressInt
    value:CurrencyCollection
    ihr_fee:Grams
    fwd_fee:Grams
    created_lt:uint64
    created_at:uint32 = CommonMsgInfoRelaxed;
-}
() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) {
        return ();
    }

    var cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) {
        ;; TODO: handle bounce messages
        return ();
    }

    var sender = cs~load_msg_addr();
    cs~load_msg_addr();
    cs~load_coins();
    cs~skip_bits(1);
    cs~load_coins();
    var fwd_fee = cs~load_coins();

    var op = in_msg_body~load_uint(32);

    if (op == op::transfer()) {
        send_tokens(in_msg_body, sender, msg_value, fwd_fee);
        return ();
    }

    if (op == op::internal_transfer()) {
        return ();
    }

    if (op == op::burn()) {
        burn_tokens(in_msg_body, sender, msg_value, fwd_fee)
        return ();
    }
}

{- get_wallet_data implementation regarding jetton standard-}
(int, slice, slice, cell) get_wallet_data() method_id {
    return load_data();
}