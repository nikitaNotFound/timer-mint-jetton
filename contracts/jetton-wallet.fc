#include "imports/stdlib.fc";

int min_tons_for_storage() asm "10000000 PUSHINT";
int gas_consumption() asm "15000000 PUSHINT";

() save_data(int balance, slice owner_address, slice jetton_master_address) impure {
    pack_jetton_wallet_data(balance, owner_address, jetton_master_address);
}

(int, slice, slice) load_data() inline {
    var cs = get_data().begin_parse();
    return (cs~load_coins(), cs~load_msg_addr(), cs~load_msg_addr());
}

{- TL-B SCHEMA OF MESSAGE BODY transfer
    query_id:uint64
    amount:(VarUInteger 16)
    destination:MsgAddress
    response_destination:MsgAddress
    custom_payload:(Maybe ^Cell)
    forward_ton_amount:(VarUInteger 16)
    forward_payload:(Either Cell ^Cell) = InternalMsgBody;
-}
() send_tokens(slice in_msg_body, slice sender, int msg_value, int fwd_fee) impure {
    int query_id = in_msg_body~load_uint(64);
    int jetton_amount = in_msg_body~load_coins();
    slice to_owner = in_msg_body~load_msg_addr();
    force_chain(to_owner);
    (int balance, slice owner, slice jetton_master) = load_data();
    balance -= jetton_amount;

    throw_unless(705, equal_slices(sender, owner));
    throw_unless(706, balance >= 0);
}

{- TL-B SCHEMA OF MESSAGE BODY internal_transfer
    query_id:uint64
    amount:(VarUInteger 16)
    from:MsgAddress
    response_address:MsgAddress
    forward_ton_amount:(VarUInteger 16)
    forward_payload:(Either Cell ^Cell) = InternalMsgBody;
-}
() receive_tokens (slice in_msg_body, slice sender_address, int my_ton_balance, int fwd_fee, int msg_value) impure {

}

{- TL-B SCHEMA OF MESSAGE BODY burn
    query_id:uint64
    amount:(VarUInteger 16)
    response_destination:MsgAddress
    custom_payload:(Maybe ^Cell) = InternalMsgBody;
-}
() burn_tokens(slice in_msg_body, slice sender, int msg_value, int fwd_fee) impure {
    int query_id = in_msg_body~load_uint(64);
    int jetton_amount = in_msg_body~load_coins();
    slice response_address = in_msg_body~load_msg_addr();
}

{- TL-B of internal message int_msg_info
    $0: just one bit equals to zero, which identifies msg as internal, for external it would be equals to 1
    ihr_disabled:Bool
    bounce:Bool
    bounced:Bool
    src:MsgAddress
    dest:MsgAddressInt
    value:CurrencyCollection
    ihr_fee:Grams
    fwd_fee:Grams
    created_lt:uint64
    created_at:uint32 = CommonMsgInfoRelaxed;
-}
() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) {
        return ();
    }

    var cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) {
        ;; TODO: handle bounce messages
        return ();
    }

    var sender = cs~load_msg_addr();
    cs~load_msg_addr();
    cs~load_coins();
    cs~skip_bits(1);
    cs~load_coins();
    var fwd_fee = cs~load_coins();

    var op = in_msg_body~load_uint(32);

    if (op == op::transfer()) {
        send_tokens(in_msg_body, sender, msg_value, fwd_fee);
        return ();
    }

    if (op == op::internal_transfer()) {
        return ();
    }

    if (op == op::burn()) {
        burn_tokens(in_msg_body, sender, msg_value, fwd_fee)
        return ();
    }
}
