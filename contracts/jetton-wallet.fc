#include "imports/stdlib.fc";

() save_data(int balance, slice owner_address, slice jetton_master_address) impure {
    pack_jetton_wallet_data(balance, owner_address, jetton_master_address);
}

(int, slice, slice) load_data() inline {
    var cs = get_data().begin_parse();
    return (cs~load_coins(), cs~load_msg_addr(), cs~load_msg_addr());
}

() send_tokens(slice in_msg_body, slice sender, int msg_value, int fwd_fee) impure {

}

() burn_tokens(slice in_msg_body, slice sender, int msg_value, int fwd_fee) impure {

}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) {
        return ();
    }

    var cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) {
        ;; TODO: handle bounce messages
        return ();
    }

    var sender = cs~load_msg_addr();
    cs~load_msg_addr();
    cs~load_coins();
    cs~skip_bits(1);
    cs~load_coins();
    var fwd_fee = cs~load_coins();

    var op = in_msg_body~load_uint(32);

    if (op == op::transfer()) {
        send_tokens(in_msg_body, sender, msg_value, fwd_fee);
        return ();
    }

    if (op == op::burn()) {
        burn_tokens(in_msg_body, sender, msg_value, fwd_fee)
        return ();
    }
}
